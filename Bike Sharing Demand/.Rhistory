filter(value > 0) %>%
group_by(weather.type) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(weather.type, casual.users, registered.users) %>%
distinct(weather.type, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.by.weather <- ggplot(users.by.weather,
mapping = aes(reorder(weather.type, user.count),
user.count, fill = user.type)) +
geom_bar(stat = 'identity', width = 0.8) +
scale_y_continuous(labels = comma) +
coord_flip() +
xlab('weather type') +
ggtitle('No. of Users by Weather')
plot.users.by.weather
users.over.days.of.week <- train.data %>%
group_by(week.day) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(week.day, casual.users, registered.users) %>%
distinct(week.day, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.over.days.of.week <-
ggplot(users.over.days.of.week,
mapping = aes(x = week.day, y = user.count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users over Days of Week',
subtitle = '(User count is in thousands)')
plot.users.over.days.of.week
users.by.hour.of.day <- train.data %>%
group_by(day.hour) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(day.hour, casual.users, registered.users) %>%
distinct(day.hour, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.by.hour.of.day <-
ggplot(users.by.hour.of.day,
mapping = aes(x = day.hour, y = user.count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day
users.by.hour.of.day.by.season <- train.data %>%
group_by(season, day.hour) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(season, day.hour, casual.users, registered.users) %>%
distinct(season, day.hour, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.by.hour.of.day.by.season <-
ggplot(users.by.hour.of.day.by.season,
mapping = aes(x = day.hour, y = user.count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
facet_wrap(~ season) +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day by Season',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day.by.season
corr.temp.hum.wind.user <- train.data %>%
select(atemp, humidity, windspeed, count) %>%
distinct() %>% cor() %>% round(digits = 1)
plot.corr.temp.hum.wind.user <-
ggcorrplot(corr = corr.temp.hum.wind.user, method = 'circle',
type = 'lower', hc.order = T, lab = T, lab_size = 4,
ggtheme = theme_bw,
title = 'Correlaton between Temp, Humidity, Windspeed & UserCount')
plot.corr.temp.hum.wind.user
clusters <- makeCluster(detectCores() - 1)
registerDoParallel(clusters)
feature.train <- train.data %>%
select(season, atemp, humidity, windspeed, clear, partly_cloudy,
mist, cloudy, light_snow_rain, thunderstorm, heavy_snow_rain_ice_fog,
date.year, date.month, month.day, week.day, day.hour, day.type,
count) %>%
distinct()
set.seed(777)
inTraining <- createDataPartition(feature.train$count, p = 0.75, list = F)
training <- feature.train[inTraining, ]
testing <- feature.train[-inTraining, ]
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3,
verboseIter = T, allowParallel = T)
set.seed(777)
#fit.rf <- train(x = training[, -18], y = training$count, method = 'rf')
fit.rf <- randomForest(formula = count ~ ., data = training, ntree = 100)
stopCluster(clusters)
registerDoSEQ()
predict.rf <- predict(fit.rf, newdata = testing)
confusionMatrix(predict.rf)
confusionMatrix(data = predict.rf, reference = testing$count)
table(predict.rf, testing$count)
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3,
verboseIter = T, allowParallel = T)
grid.rf <- expand.grid(.mtry = c(2, 4, 8, 17))
require(plyr)
detach(package:plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(caret)
library(randomForest)
library(lubridate)
library(scales)
library(ggcorrplot)
library(parallel)
library(doParallel)
train.data <- tbl_df(read.csv('./Input/train.csv', stringsAsFactors = F))
test.data <- tbl_df(read.csv('./Input/test.csv', stringsAsFactors = F))
str(train.data)
summary(train.data)
season.list <- c('spring', 'summer', 'fall', 'winter')
replace_season <- function(df){
df[['season']] <- plyr::mapvalues(df[['season']],
from = c(1, 2, 3, 4),
to = season.list)
return(df)
}
train.data <- replace_season(train.data)
train.data <- train.data %>%
mutate(clear = 0, partly_cloudy = 0, mist = 0, cloudy = 0,
light_snow_rain = 0, thunderstorm = 0, heavy_snow_rain_ice_fog = 0)
weather_matrix <- function(df){
df[['clear']]                   <- ifelse(df[['weather']] == 1, 1, 0)
df[['partly_cloudy']]           <- ifelse(df[['weather']] %in% c(1, 2, 3), 1, 0)
df[['mist']]                    <- ifelse(df[['weather']] %in% c(2, 4), 1, 0)
df[['cloudy']]                  <- ifelse(df[['weather']] == 2, 1, 0)
df[['light_snow_rain']]         <- ifelse(df[['weather']] == 3, 1, 0)
df[['thunderstorm']]            <- ifelse(df[['weather']] %in% c(3, 4), 1, 0)
df[['heavy_snow_rain_ice_fog']] <- ifelse(df[['weather']] == 4, 1, 0)
return(df)
}
train.data <- weather_matrix(train.data)
train.data <- train.data %>%
mutate(date.year = 0, date.month = '', month.day = 0,
week.day = '', day.hour = 0)
split_date <- function(df){
df[['date.year']] = year(df[['datetime']])
df[['date.month']] = month(df[['datetime']], label = T)
df[['month.day']] = day(df[['datetime']])
df[['week.day']] = wday(df[['datetime']], label = T)
df[['day.hour']] = hour(df[['datetime']])
return(df)
}
train.data <- split_date(train.data)
train.data <- train.data %>%
mutate(temp.diff = atemp - temp)
train.data <- train.data %>%
mutate(day.type = NA)
day_type <- function(df){
df[['day.type']] <- ifelse(df[['holiday']] == 1, 'Holiday',
ifelse(df[['workingday']] == 1, 'Workingday',
'Weekend'))
return(df)
}
train.data <- day_type(train.data)
train.data[c(2:5, 13:24, 26)] <- lapply(train.data[c(2:5, 13:24, 26)], factor)
summary(train.data)
train.data %>% mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(casual.users, registered.users) %>%
distinct(casual.users, registered.users) %>%
prop.table()
users.by.season <- train.data %>%
group_by(season) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(season, casual.users, registered.users) %>%
distinct(season, casual.users, registered.users) %>%
gather(key = user.type, value = user.count, casual.users:registered.users)
plot.users.by.season <- ggplot(users.by.season,
mapping = aes(season, user.count,
fill = user.type)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.7) +
scale_y_continuous(labels = comma) +
coord_flip() +
ggtitle('No. of Users by Season')
plot.users.by.season
users.by.weather <- train.data %>%
gather(key = weather.type, value = value,
clear:heavy_snow_rain_ice_fog) %>%
filter(value > 0) %>%
group_by(weather.type) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(weather.type, casual.users, registered.users) %>%
distinct(weather.type, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.by.weather <- ggplot(users.by.weather,
mapping = aes(reorder(weather.type, user.count),
user.count, fill = user.type)) +
geom_bar(stat = 'identity', width = 0.8) +
scale_y_continuous(labels = comma) +
coord_flip() +
xlab('weather type') +
ggtitle('No. of Users by Weather')
plot.users.by.weather
users.over.days.of.week <- train.data %>%
group_by(week.day) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(week.day, casual.users, registered.users) %>%
distinct(week.day, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.over.days.of.week <-
ggplot(users.over.days.of.week,
mapping = aes(x = week.day, y = user.count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users over Days of Week',
subtitle = '(User count is in thousands)')
plot.users.over.days.of.week
users.by.hour.of.day <- train.data %>%
group_by(day.hour) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(day.hour, casual.users, registered.users) %>%
distinct(day.hour, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.by.hour.of.day <-
ggplot(users.by.hour.of.day,
mapping = aes(x = day.hour, y = user.count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day
users.by.hour.of.day.by.season <- train.data %>%
group_by(season, day.hour) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(season, day.hour, casual.users, registered.users) %>%
distinct(season, day.hour, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.by.hour.of.day.by.season <-
ggplot(users.by.hour.of.day.by.season,
mapping = aes(x = day.hour, y = user.count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
facet_wrap(~ season) +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day by Season',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day.by.season
corr.temp.hum.wind.user <- train.data %>%
select(atemp, humidity, windspeed, count) %>%
distinct() %>% cor() %>% round(digits = 1)
plot.corr.temp.hum.wind.user <-
ggcorrplot(corr = corr.temp.hum.wind.user, method = 'circle',
type = 'lower', hc.order = T, lab = T, lab_size = 4,
ggtheme = theme_bw,
title = 'Correlaton between Temp, Humidity, Windspeed & UserCount')
plot.corr.temp.hum.wind.user
clusters <- makeCluster(detectCores() - 1)
registerDoParallel(clusters)
feature.train <- train.data %>%
select(season, atemp, humidity, windspeed, clear, partly_cloudy,
mist, cloudy, light_snow_rain, thunderstorm, heavy_snow_rain_ice_fog,
date.year, date.month, month.day, week.day, day.hour, day.type,
count) %>%
distinct()
set.seed(777)
inTraining <- createDataPartition(feature.train$count, p = 0.75, list = F)
training <- feature.train[inTraining, ]
testing <- feature.train[-inTraining, ]
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3,
verboseIter = T, allowParallel = T)
grid.rf <- expand.grid(.mtry = c(2, 4, 8, 17))
set.seed(777)
#fit.rf <- randomForest(formula = count ~ ., data = training, ntree = 100)
stopCluster(clusters)
registerDoSEQ()
#predict.rf <- predict(fit.rf, newdata = testing)
#table(predict.rf, testing$count)
setwd("~/Code/Data Science Projects/Kaggle-Submissions/Bike Sharing Demand")
save.image("~/Code/Data Science Projects/Kaggle-Submissions/Bike Sharing Demand/Bike_Sharing_Demand_v1.RData")
View(grid.rf)
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 5,
verboseIter = T, allowParallel = T)
grid.rf <- expand.grid(.mtry = c(2, 4, 8, 17))
set.seed(777)
fit.rf <- randomForest(x = training[, -18], y = training[, 18],
ntree = 200, importance = T)
require(plyr)
detach(package:plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(caret)
library(randomForest)
library(lubridate)
library(scales)
library(ggcorrplot)
library(parallel)
library(doParallel)
train.data <- tbl_df(read.csv('./Input/train.csv', stringsAsFactors = F))
test.data <- tbl_df(read.csv('./Input/test.csv', stringsAsFactors = F))
str(train.data)
summary(train.data)
season.list <- c('spring', 'summer', 'fall', 'winter')
replace_season <- function(df){
df[['season']] <- plyr::mapvalues(df[['season']],
from = c(1, 2, 3, 4),
to = season.list)
return(df)
}
train.data <- replace_season(train.data)
train.data <- train.data %>%
mutate(clear = 0, partly_cloudy = 0, mist = 0, cloudy = 0,
light_snow_rain = 0, thunderstorm = 0, heavy_snow_rain_ice_fog = 0)
weather_matrix <- function(df){
df[['clear']]                   <- ifelse(df[['weather']] == 1, 1, 0)
df[['partly_cloudy']]           <- ifelse(df[['weather']] %in% c(1, 2, 3), 1, 0)
df[['mist']]                    <- ifelse(df[['weather']] %in% c(2, 4), 1, 0)
df[['cloudy']]                  <- ifelse(df[['weather']] == 2, 1, 0)
df[['light_snow_rain']]         <- ifelse(df[['weather']] == 3, 1, 0)
df[['thunderstorm']]            <- ifelse(df[['weather']] %in% c(3, 4), 1, 0)
df[['heavy_snow_rain_ice_fog']] <- ifelse(df[['weather']] == 4, 1, 0)
return(df)
}
train.data <- weather_matrix(train.data)
train.data <- train.data %>%
mutate(date.year = 0, date.month = '', month.day = 0,
week.day = '', day.hour = 0)
split_date <- function(df){
df[['date.year']] = year(df[['datetime']])
df[['date.month']] = month(df[['datetime']], label = T)
df[['month.day']] = day(df[['datetime']])
df[['week.day']] = wday(df[['datetime']], label = T)
df[['day.hour']] = hour(df[['datetime']])
return(df)
}
train.data <- split_date(train.data)
train.data <- train.data %>%
mutate(temp.diff = atemp - temp)
train.data <- train.data %>%
mutate(day.type = NA)
day_type <- function(df){
df[['day.type']] <- ifelse(df[['holiday']] == 1, 'Holiday',
ifelse(df[['workingday']] == 1, 'Workingday',
'Weekend'))
return(df)
}
train.data <- day_type(train.data)
train.data[c(2:5, 13:24, 26)] <- lapply(train.data[c(2:5, 13:24, 26)], factor)
summary(train.data)
train.data %>% mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(casual.users, registered.users) %>%
distinct(casual.users, registered.users) %>%
prop.table()
users.by.season <- train.data %>%
group_by(season) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(season, casual.users, registered.users) %>%
distinct(season, casual.users, registered.users) %>%
gather(key = user.type, value = user.count, casual.users:registered.users)
plot.users.by.season <- ggplot(users.by.season,
mapping = aes(season, user.count,
fill = user.type)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.7) +
scale_y_continuous(labels = comma) +
coord_flip() +
ggtitle('No. of Users by Season')
plot.users.by.season
users.by.weather <- train.data %>%
gather(key = weather.type, value = value,
clear:heavy_snow_rain_ice_fog) %>%
filter(value > 0) %>%
group_by(weather.type) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(weather.type, casual.users, registered.users) %>%
distinct(weather.type, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.by.weather <- ggplot(users.by.weather,
mapping = aes(reorder(weather.type, user.count),
user.count, fill = user.type)) +
geom_bar(stat = 'identity', width = 0.8) +
scale_y_continuous(labels = comma) +
coord_flip() +
xlab('weather type') +
ggtitle('No. of Users by Weather')
plot.users.by.weather
users.over.days.of.week <- train.data %>%
group_by(week.day) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(week.day, casual.users, registered.users) %>%
distinct(week.day, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.over.days.of.week <-
ggplot(users.over.days.of.week,
mapping = aes(x = week.day, y = user.count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users over Days of Week',
subtitle = '(User count is in thousands)')
plot.users.over.days.of.week
users.by.hour.of.day <- train.data %>%
group_by(day.hour) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(day.hour, casual.users, registered.users) %>%
distinct(day.hour, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.by.hour.of.day <-
ggplot(users.by.hour.of.day,
mapping = aes(x = day.hour, y = user.count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day
users.by.hour.of.day.by.season <- train.data %>%
group_by(season, day.hour) %>%
mutate(casual.users = sum(casual),
registered.users = sum(registered)) %>%
select(season, day.hour, casual.users, registered.users) %>%
distinct(season, day.hour, casual.users, registered.users) %>%
gather(key = user.type, value = user.count,
casual.users:registered.users)
plot.users.by.hour.of.day.by.season <-
ggplot(users.by.hour.of.day.by.season,
mapping = aes(x = day.hour, y = user.count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
facet_wrap(~ season) +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day by Season',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day.by.season
corr.temp.hum.wind.user <- train.data %>%
select(atemp, humidity, windspeed, count) %>%
distinct() %>% cor() %>% round(digits = 1)
plot.corr.temp.hum.wind.user <-
ggcorrplot(corr = corr.temp.hum.wind.user, method = 'circle',
type = 'lower', hc.order = T, lab = T, lab_size = 4,
ggtheme = theme_bw,
title = 'Correlaton between Temp, Humidity, Windspeed & UserCount')
plot.corr.temp.hum.wind.user
feature.train <- train.data %>%
select(season, atemp, humidity, windspeed, clear, partly_cloudy,
mist, cloudy, light_snow_rain, thunderstorm, heavy_snow_rain_ice_fog,
date.year, date.month, month.day, week.day, day.hour, day.type,
count) %>%
distinct()
set.seed(777)
inTraining <- createDataPartition(feature.train$count, p = 0.75, list = F)
training <- feature.train[inTraining, ]
testing <- feature.train[-inTraining, ]
set.seed(777)
fit.rf <- randomForest(x = training[, -18], y = training[, 18],
ntree = 200, importance = T)
View(training)
set.seed(777)
fit.rf <- randomForest(formula = count ~ ., data =  training,
ntree = 200, importance = T)
predict.rf <- predict(fit.rf, newdata = testing)
RMSE(pred = predict.rf, obs = testing$count)
fit.rf
fit.rf$mse
fit.rf$importance
fit.rf$importanceSD
feature.imp <- as.data.frame(fit.rf$importance)
View(feature.imp)
feature.imp <- as.data.frame(fit.rf$importance)
qplot(feature.imp$`%IncMSE`)
View(feature.imp)
feature.imp <- as.data.frame(fit.rf$importance) %>%
mutate(feature = rownames)
feature.imp <- as.data.frame(fit.rf$importance) %>%
cbind(feature.name = rownames)
feature.imp <- cbind(rownames(feature.imp), feature.imp)
View(feature.imp)
feature.imp <- as.data.frame(fit.rf$importance)
feature.imp <- cbind(feature.name = rownames(feature.imp), feature.imp)
View(feature.imp)
View(feature.imp)
qplot(feature.imp$feature.name, feature.imp$`%IncMSE`)
feature.imp <- as.data.frame(fit.rf$importance)
feature.imp <- cbind(feature.name = rownames(feature.imp), feature.imp)
qplot(feature.imp$`%IncMSE`, feature.imp$feature.name)
qplot(feature.imp$IncNodePurity, feature.imp$feature.name)
feature.imp <- as.data.frame(fit.rf$importance)
feature.imp <- cbind(feature.name = rownames(feature.imp), feature.imp)
qplot(feature.imp$IncNodePurity, feature.imp$feature.name,
xlab = 'Feature Name', ylab = 'Importance')
save.image("~/Code/Data Science Projects/Kaggle-Submissions/Bike Sharing Demand/Bike_Sharing_Demand_v1.RData")
