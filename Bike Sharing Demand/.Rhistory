library(ggplot2)
library(stringr)
library(caret)
library(randomForest)
library(lubridate)
library(scales)
library(ggcorrplot)
library(parallel)
library(doParallel)
train.data <- tbl_df(read.csv('./Input/train.csv', stringsAsFactors = F))
test.data <- tbl_df(read.csv('./Input/test.csv', stringsAsFactors = F))
str(train.data)
summary(train.data)
season.list <- c('spring', 'summer', 'fall', 'winter')
replace_season <- function(df){
df[['season']] <- plyr::mapvalues(df[['season']],
from = c(1, 2, 3, 4),
to = season.list)
return(df)
}
train.data <- replace_season(train.data)
weather.list <- c('clear_partly_cloudy', 'mist_cloudy',
'light_snow_rain_thunderstorm',
'heavy_snow_rain_ice_fog_thunderstorm')
replace_weather <- function(df){
df[['weather']] <- plyr::mapvalues(df[['weather']],
from = c(1, 2, 3, 4),
to = weather.list)
return(df)
}
train.data <- replace_weather(train.data)
train.data <- train.data %>%
mutate(date.year = 0, date.month = '', month.day = 0,
week.day = '', day.hour = 0)
split_date <- function(df){
df[['date.year']] = year(df[['datetime']])
df[['date.month']] = month(df[['datetime']], label = T)
df[['month.day']] = day(df[['datetime']])
df[['week.day']] = wday(df[['datetime']], label = T)
df[['day.hour']] = hour(df[['datetime']])
return(df)
}
train.data <- split_date(train.data)
train.data <- train.data %>%
mutate(temp.div = temp / atemp)
train.data <- train.data %>%
mutate(day.type = NA)
day_type <- function(df){
df[['day.type']] <- ifelse(df[['holiday']] == 1, 'Holiday',
ifelse(df[['workingday']] == 1, 'Workingday',
'Weekend'))
return(df)
}
train.data <- day_type(train.data) %>% select(-holiday, -workingday)
tidy.train.data <- train.data %>%
group_by(datetime) %>%
gather(key = user.type, value = user.count,
casual:registered) %>%
select(-count) %>% ungroup()
tidy.train.data[c(2:3, 8:12, 14:15)] <-
lapply(tidy.train.data[c(2:3, 8:12, 14:15)], factor)
summary(tidy.train.data)
tidy.train.data %>% mutate(total.count = sum(user.count)) %>%
group_by(user.type) %>%
mutate(count = sum(user.count) , prop = count / total.count) %>%
select(user.type, count, prop) %>%
distinct()
plot.users.by.season <- tidy.train.data %>%
select(season, user.type, user.count) %>%
group_by(season, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(season, user.type, count) %>%
ggplot(mapping = aes(season, count, fill = user.type)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.7) +
scale_y_continuous(labels = comma) +
coord_flip() +
ggtitle('No. of Users by Season')
plot.users.by.season
plot.users.by.weather <- tidy.train.data %>%
select(weather, user.type, user.count) %>%
group_by(weather, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(weather, user.type, count) %>%
ggplot(mapping = aes(reorder(weather, count), count,
fill = user.type)) +
geom_bar(stat = 'identity', width = 0.8) +
scale_y_continuous(labels = comma) +
coord_flip() +
xlab('weather type') +
ggtitle('No. of Users by Weather')
plot.users.by.weather
plot.users.over.days.of.week <-tidy.train.data %>%
select(week.day, user.type, user.count) %>%
group_by(week.day, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(week.day, user.type, count) %>%
ggplot(mapping = aes(x = week.day, y = count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users over Days of Week',
subtitle = '(User count is in thousands)')
plot.users.over.days.of.week
plot.users.by.hour.of.day <- tidy.train.data %>%
select(day.hour, user.type, user.count) %>%
group_by(day.hour, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(day.hour, user.type, count) %>%
ggplot(mapping = aes(x = day.hour, y = count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day
plot.users.by.hour.of.day.by.season <- tidy.train.data %>%
select(season, day.hour, user.type, user.count) %>%
group_by(season, day.hour, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(season, day.hour, user.type, count) %>%
ggplot(mapping = aes(x = day.hour, y = count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
facet_wrap(~ season) +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day by Season',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day.by.season
plot.corr.temp.hum.wind.user <- tidy.train.data %>%
select(atemp, temp.div, humidity, windspeed, user.count) %>%
distinct() %>% cor() %>% round(digits = 1) %>%
ggcorrplot(method = 'circle',
type = 'lower', hc.order = T, lab = T, lab_size = 4,
ggtheme = theme_bw,
title = 'Correlaton between Temp, Humidity, Windspeed & UserCount')
plot.corr.temp.hum.wind.user
View(tidy.train.data)
ncluster <- makeCluster(detectCores() - 1)
registerDoParallel(ncluster)
set.seed(777)
inTraining <- createDataPartition(y = tidy.train.data$user.count,
p = 0.75, list = F)
training <- tidy.train.data[inTraining, ]
testing <- tidy.train.data[-inTraining, ]
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 5,
verboseIter = T, allowParallel = T)
grid.rf <- expand.grid(.mtry = c(2, 4, 7, 14))
View(training)
sample.train.data <- sample_n(tidy.train.data, size = 1000)
set.seed(777)
sample.train.data <- sample_n(tidy.train.data, size = 1000)
inTraining <- createDataPartition(y = sample.train.data$user.count,
p = 0.75, list = F)
training <- sample.train.data[inTraining, ]
testing <- sample.train.data[-inTraining, ]
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 5,
verboseIter = T, allowParallel = T)
grid.rf <- expand.grid(.mtry = c(2, 4, 7, 14))
View(sample.train.data)
View(training)
require(plyr)
detach(package:plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(caret)
library(randomForest)
library(lubridate)
library(scales)
library(ggcorrplot)
library(parallel)
library(doParallel)
train.data <- tbl_df(read.csv('./Input/train.csv', stringsAsFactors = F))
test.data <- tbl_df(read.csv('./Input/test.csv', stringsAsFactors = F))
str(train.data)
summary(train.data)
season.list <- c('spring', 'summer', 'fall', 'winter')
replace_season <- function(df){
df[['season']] <- plyr::mapvalues(df[['season']],
from = c(1, 2, 3, 4),
to = season.list)
return(df)
}
train.data <- replace_season(train.data)
weather.list <- c('clear_partly_cloudy', 'mist_cloudy',
'light_snow_rain_thunderstorm',
'heavy_snow_rain_ice_fog_thunderstorm')
replace_weather <- function(df){
df[['weather']] <- plyr::mapvalues(df[['weather']],
from = c(1, 2, 3, 4),
to = weather.list)
return(df)
}
train.data <- replace_weather(train.data)
train.data <- train.data %>%
mutate(date.year = 0, date.month = '', month.day = 0,
week.day = '', day.hour = 0)
split_date <- function(df){
df[['date.year']] = year(df[['datetime']])
df[['date.month']] = month(df[['datetime']], label = T)
df[['month.day']] = day(df[['datetime']])
df[['week.day']] = wday(df[['datetime']], label = T)
df[['day.hour']] = hour(df[['datetime']])
return(df)
}
train.data <- split_date(train.data)
train.data <- train.data %>%
mutate(temp.div = temp / atemp)
train.data <- train.data %>%
mutate(day.type = NA)
day_type <- function(df){
df[['day.type']] <- ifelse(df[['holiday']] == 1, 'Holiday',
ifelse(df[['workingday']] == 1, 'Workingday',
'Weekend'))
return(df)
}
train.data <- day_type(train.data) %>% select(-holiday, -workingday)
tidy.train.data <- train.data %>%
group_by(datetime) %>%
gather(key = user.type, value = user.count,
casual:registered) %>%
select(-count) %>% ungroup()
tidy.train.data[c(2:3, 8:12, 14:15)] <-
lapply(tidy.train.data[c(2:3, 8:12, 14:15)], factor)
summary(tidy.train.data)
tidy.train.data %>% mutate(total.count = sum(user.count)) %>%
group_by(user.type) %>%
mutate(count = sum(user.count) , prop = count / total.count) %>%
select(user.type, count, prop) %>%
distinct()
plot.users.by.season <- tidy.train.data %>%
select(season, user.type, user.count) %>%
group_by(season, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(season, user.type, count) %>%
ggplot(mapping = aes(season, count, fill = user.type)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.7) +
scale_y_continuous(labels = comma) +
coord_flip() +
ggtitle('No. of Users by Season')
plot.users.by.season
plot.users.by.weather <- tidy.train.data %>%
select(weather, user.type, user.count) %>%
group_by(weather, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(weather, user.type, count) %>%
ggplot(mapping = aes(reorder(weather, count), count,
fill = user.type)) +
geom_bar(stat = 'identity', width = 0.8) +
scale_y_continuous(labels = comma) +
coord_flip() +
xlab('weather type') +
ggtitle('No. of Users by Weather')
plot.users.by.weather
plot.users.over.days.of.week <-tidy.train.data %>%
select(week.day, user.type, user.count) %>%
group_by(week.day, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(week.day, user.type, count) %>%
ggplot(mapping = aes(x = week.day, y = count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users over Days of Week',
subtitle = '(User count is in thousands)')
plot.users.over.days.of.week
plot.users.by.hour.of.day <- tidy.train.data %>%
select(day.hour, user.type, user.count) %>%
group_by(day.hour, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(day.hour, user.type, count) %>%
ggplot(mapping = aes(x = day.hour, y = count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day
plot.users.by.hour.of.day.by.season <- tidy.train.data %>%
select(season, day.hour, user.type, user.count) %>%
group_by(season, day.hour, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(season, day.hour, user.type, count) %>%
ggplot(mapping = aes(x = day.hour, y = count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
facet_wrap(~ season) +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day by Season',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day.by.season
plot.corr.temp.hum.wind.user <- tidy.train.data %>%
select(atemp, temp.div, humidity, windspeed, user.count) %>%
distinct() %>% cor() %>% round(digits = 1) %>%
ggcorrplot(method = 'circle',
type = 'lower', hc.order = T, lab = T, lab_size = 4,
ggtheme = theme_bw,
title = 'Correlaton between Temp, Humidity, Windspeed & UserCount')
plot.corr.temp.hum.wind.user
ncluster <- makeCluster(detectCores() - 1)
registerDoParallel(ncluster)
set.seed(777)
sample.train.data <- sample_n(tidy.train.data, size = 1000)
inTraining <- createDataPartition(y = sample.train.data$user.count,
p = 0.75, list = F)
training <- sample.train.data[inTraining, ]
testing <- sample.train.data[-inTraining, ]
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 5,
verboseIter = T, allowParallel = T)
grid.rf <- expand.grid(.mtry = c(2, 4, 7, 14))
require(plyr)
detach(package:plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(caret)
library(randomForest)
library(lubridate)
library(scales)
library(ggcorrplot)
library(parallel)
library(doParallel)
train.data <- tbl_df(read.csv('./Input/train.csv', stringsAsFactors = F))
test.data <- tbl_df(read.csv('./Input/test.csv', stringsAsFactors = F))
str(train.data)
summary(train.data)
season.list <- c('spring', 'summer', 'fall', 'winter')
replace_season <- function(df){
df[['season']] <- plyr::mapvalues(df[['season']],
from = c(1, 2, 3, 4),
to = season.list)
return(df)
}
train.data <- replace_season(train.data)
weather.list <- c('clear_partly_cloudy', 'mist_cloudy',
'light_snow_rain_thunderstorm',
'heavy_snow_rain_ice_fog_thunderstorm')
replace_weather <- function(df){
df[['weather']] <- plyr::mapvalues(df[['weather']],
from = c(1, 2, 3, 4),
to = weather.list)
return(df)
}
train.data <- replace_weather(train.data)
train.data <- train.data %>%
mutate(date.year = 0, date.month = '', month.day = 0,
week.day = '', day.hour = 0)
split_date <- function(df){
df[['date.year']] = year(df[['datetime']])
df[['date.month']] = month(df[['datetime']], label = T)
df[['month.day']] = day(df[['datetime']])
df[['week.day']] = wday(df[['datetime']], label = T)
df[['day.hour']] = hour(df[['datetime']])
return(df)
}
train.data <- split_date(train.data)
train.data <- train.data %>%
mutate(temp.div = temp / atemp)
train.data <- train.data %>%
mutate(day.type = NA)
day_type <- function(df){
df[['day.type']] <- ifelse(df[['holiday']] == 1, 'Holiday',
ifelse(df[['workingday']] == 1, 'Workingday',
'Weekend'))
return(df)
}
train.data <- day_type(train.data) %>% select(-holiday, -workingday)
tidy.train.data <- train.data %>%
group_by(datetime) %>%
gather(key = user.type, value = user.count,
casual:registered) %>%
select(-count) %>% ungroup()
tidy.train.data[c(2:3, 8:12, 14:15)] <-
lapply(tidy.train.data[c(2:3, 8:12, 14:15)], factor)
summary(tidy.train.data)
tidy.train.data %>% mutate(total.count = sum(user.count)) %>%
group_by(user.type) %>%
mutate(count = sum(user.count) , prop = count / total.count) %>%
select(user.type, count, prop) %>%
distinct()
plot.users.by.season <- tidy.train.data %>%
select(season, user.type, user.count) %>%
group_by(season, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(season, user.type, count) %>%
ggplot(mapping = aes(season, count, fill = user.type)) +
geom_bar(stat = 'identity', position = 'dodge', width = 0.7) +
scale_y_continuous(labels = comma) +
coord_flip() +
ggtitle('No. of Users by Season')
plot.users.by.season
plot.users.by.weather <- tidy.train.data %>%
select(weather, user.type, user.count) %>%
group_by(weather, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(weather, user.type, count) %>%
ggplot(mapping = aes(reorder(weather, count), count,
fill = user.type)) +
geom_bar(stat = 'identity', width = 0.8) +
scale_y_continuous(labels = comma) +
coord_flip() +
xlab('weather type') +
ggtitle('No. of Users by Weather')
plot.users.by.weather
plot.users.over.days.of.week <-tidy.train.data %>%
select(week.day, user.type, user.count) %>%
group_by(week.day, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(week.day, user.type, count) %>%
ggplot(mapping = aes(x = week.day, y = count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users over Days of Week',
subtitle = '(User count is in thousands)')
plot.users.over.days.of.week
plot.users.by.hour.of.day <- tidy.train.data %>%
select(day.hour, user.type, user.count) %>%
group_by(day.hour, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(day.hour, user.type, count) %>%
ggplot(mapping = aes(x = day.hour, y = count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day
plot.users.by.hour.of.day.by.season <- tidy.train.data %>%
select(season, day.hour, user.type, user.count) %>%
group_by(season, day.hour, user.type) %>%
mutate(count = sum(user.count)) %>%
distinct(season, day.hour, user.type, count) %>%
ggplot(mapping = aes(x = day.hour, y = count/1000,
fill = user.type)) +
geom_bar(stat = 'identity') +
facet_wrap(~ season) +
ylab('No. of users in 1000\'s') +
ggtitle(label = 'No. of Users by Hour of Day by Season',
subtitle = '(User count is in thousands)')
plot.users.by.hour.of.day.by.season
plot.corr.temp.hum.wind.user <- tidy.train.data %>%
select(atemp, temp.div, humidity, windspeed, user.count) %>%
distinct() %>% cor() %>% round(digits = 1) %>%
ggcorrplot(method = 'circle',
type = 'lower', hc.order = T, lab = T, lab_size = 4,
ggtheme = theme_bw,
title = 'Correlaton between Temp, Humidity, Windspeed & UserCount')
plot.corr.temp.hum.wind.user
ncluster <- makeCluster(detectCores() - 1)
registerDoParallel(ncluster)
set.seed(777)
sample.train.data <- sample_n(tidy.train.data, size = 1000)
inTraining <- createDataPartition(y = sample.train.data$user.count,
p = 0.75, list = F)
training <- sample.train.data[inTraining, ]
testing <- sample.train.data[-inTraining, ]
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 5,
verboseIter = T, allowParallel = T)
grid.rf <- expand.grid(.mtry = c(2, 4, 7, 14))
save.image("~/Code/Data Science Projects/Kaggle-Submissions/Bike Sharing Demand/Bike_Sharing_Demand_v2.RData")
set.seed(777)
fit.rf <- train(x = training[2:15], y = training[16], method = 'rf',
metric = 'RMSE', trControl = tr.ctrl, tuneGrid = grid.rf)
set.seed(777)
fit.rf <- train(x = training[2:15], y = training$user.count, method = 'rf',
metric = 'RMSE', trControl = tr.ctrl, tuneGrid = grid.rf)
fit.rf
summary(fit.rf)
fit.rf
set.seed(777)
sample.train.data <- sample_n(tidy.train.data, size = 2000)
inTraining <- createDataPartition(y = sample.train.data$user.count,
p = 0.75, list = F)
training <- sample.train.data[inTraining, ]
testing <- sample.train.data[-inTraining, ]
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 5,
verboseIter = T, allowParallel = T)
grid.rf <- expand.grid(.mtry = c(2, 4, 7, 14))
set.seed(777)
fit.lm <- train(x = training[2:15], y = training$user.count, method = 'lm',
metric = 'RMSE', trControl = tr.ctrl, tuneGrid = grid.rf)
set.seed(777)
fit.lm <- train(x = training[2:15], y = training$user.count, method = 'lm',
metric = 'RMSE', trControl = tr.ctrl)
set.seed(777)
fit.rpart <- train(x = training[2:15], y = training$user.count, method = 'rpart',
metric = 'RMSE', trControl = tr.ctrl)
set.seed(777)
fit.rf <- train(x = training[2:15], y = training$user.count, method = 'rf',
metric = 'RMSE', trControl = tr.ctrl, tuneGrid = grid.rf)
resamps <- resamples(list(LM = fit.lm,
RPART = fit.rpart,
RF = fit.rf))
summary(resamps)
varImp(object = c(fit.lm, fit.rpart, fit.rf))
varImp(object = fit.lm)
varImp(object = fit.rpart)
varImp(object = fit.lm , scale = T)
varImp(object = fit.lm , scale = T, n = 10)
varImp(object = fit.lm , scale = T, nvar = 10)
varImp(object = fit.rpart)
varImp(object = fit.rf)
varImp(object = fit.rf)
varImp(object = fit.rf, scale = T)
varImp(object = fit.rf$finalModel)
stopCluster(clusters)
stopCluster(ncluster)
registerDoSEQ()
save.image("~/Code/Data Science Projects/Kaggle-Submissions/Bike Sharing Demand/Bike_Sharing_Demand_v2.RData")
