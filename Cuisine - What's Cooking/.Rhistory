c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd('testdir')
file.create('mytest.R')
ls()
list.files()
file.exists('mytest.R')
file.info('mytest.R')
file.rename('mytest.R', 'mytest2.R')
file.copy('mytest2.R', 'mytest3.R')
file.path('mytest3.R')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
unlink('testdir', recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, lenght=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=10)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
library("swirl")
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
oring_function('My first function!')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I","am","Paresh")
submit()
mad_libs(place = "Pune", adjective = "mad", noun = "statue")
submit()
'I'%p%'love'%p%'R!'
getwd
getwd()
install.packages('lubridate')
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot2")
install.packages("jpeg")
install.packages("jpeg")
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
swirl()
str(mpg)
qplot(x = mpg$displ, y = mpg$hwy, data = mpg)
qplot(x = mpg$displ, y = mpg$hwy)
qplot(x = displ, y = hwy, data = mpg)
qplot(x = displ, y = hwy, data = mpg, aes(color = drv) )
qplot(x = displ, y = hwy, data = mpg, color = drv )
qplot(x = displ, y = hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot")
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot", color = manufacturer)
hist(x = hwy, data = mpg, aes(fill = drv))
hist(mpg, x = hwy, aes(fill = drv))
hist(hwy, mpg, aes(fill = drv))
skip()
qplot(x = displ, y = hwy, data = mpg, facets = . ~ drv)
hist(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
swirL()
swirL()
swirl
swirl()
qplot(x = displ, y = hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(data = mpg, aes(x = displ, y = hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 0.5)
g + geom_point(aes(color =  drv), size = 4, alpha = 0.5)
g + geom_point(aes(color =  drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color =  drv), size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color =  drv)) + theme_bw(base_family = "Times")
library("swirl")
swirl()
plot(x = myx, y = myy, type = 'l', ylim = c(-3, 3))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = year))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(facets = drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(facets = drv ~ cyl, margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black')
g + geom_point() + facet_grid(facets = drv ~ cyl, margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black') + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
library(swirl)
Paresh
swirl()
installed.packages("fields")
installed.packages("fields")
install.packages('fields')
swirl()
dist(dataFrame)
distxy
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = 'blue')
abline(h = 0.4, col = 'red')
5
12
abline(h = 0.05, col = 'green')
dist(dFsm)
hc
heatmap(x = dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
cmat
plot(x = cx, y = cy, col = c('red', 'orange', 'purple'), pch = 3, cex = 2, lwd = 2)
plot(x = cx, y = cy, col = c("red","orange","purple"), pch = 3, cex = 2, lwd = 2)
points(x = cx, y = cy, col = c('red', 'orange', 'purple'), pch = 3, cex = 2, lwd = 2)
mdist(x = x, y = y, cx = cx, cy = cy)
apply(X = distTmp, 2, FUN = which.min)
points(x = x, y = y, pch = 19, cex = 2, cols1[newClust])
points(x = x, y = y, pch = 19, cex = 2, col = cols1[newClust])
tapply(X = x, INDEX = newClust, FUN = mean())
tapply(X = x, INDEX = newClust, FUN = mean)
tapply(X = y, INDEX = newClust, FUN = mean)
points(x = newCx, y = newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x = x, y = y, cx = newCx, cy = newCy)
apply(X = distTmp2, 2, FUN = which.min)
points(x = x, y = y, pch = 19, cex = 2, cols1[newClust2])
points(x = x, y = y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(X = x, INDEX = newClust2, FUN = mean)
tapply(X = y, INDEX = newClust2, FUN = mean)
points(x = finalCx, y = finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
View(dataFrame)
kmeans(x = dataFrame, centers = 3)
kmObj$iter
plot(x = x, y = y, col = kmObj$cluster, pch = 19, cex = 2)
points(x = kmObj$centers, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6), pch = 19, cex = 2)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6)$cluster, pch = 19, cex = 2)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6)$cluster, pch = 19, cex = 2)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6)$cluster, pch = 19, cex = 2)
version
install.packages(c("assertthat", "chron", "colorspace", "curl", "data.table", "DBI", "digest", "fields", "ggplot2", "jsonlite", "openssl", "R6", "Rcpp", "readr", "stringi", "stringr", "swirl", "tibble", "tidyr", "yaml"))
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('RGtk2')
version
library(readr)
library(dplyr)
library(ggplot2)
summer <- read.csv('summer.csv')
winter <- read.csv('winter.csv')
dictionary <- read.csv('dictionary.csv', stringsAsFactors = F)
# Adding replacing country code by name
s.olympics <- summer %>%
rename(Code = Country) %>%
left_join(., dictionary, by = 'Code')
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(n(Medal))
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(n_groups(Medal))
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(n_distinct(Medal))
View(top10.countries)
top10.countries <- s.olympics %>%
group_by(Country)
summarise(Medal, n())
top10.countries <- s.olympics %>%
group_by(Country)
summarise(n())
top10.countries <- s.olympics %>%
group_by(Country)
summarise(n = n())
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(n = n())
View(top10.countries)
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(medal.count = n())
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(medal.count = n()) %>%
head(10)
View(top10.countries)
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(medal.count = n()) %>%
arrange(desc(medal.count)) %>%
head(10)
View(top10.countries)
View(s.olympics)
summer <- tbl_df(summer)
tibble(summer)
View(summer)
glimpse(summer)
str(summer)
View(summer)
summer.na <- is.na(summer)
View(summer.na)
summer.na <- summer[is.na(summer)]
summer.na <- summer[is.na(summer), ]
View(summer.na)
summer.na <- summer[which(is.na(summer))]
View(summer.na)
library(readr)
library(dplyr)
library(ggplot2)
summer <- read.csv('summer.csv')
winter <- read.csv('winter.csv')
dictionary <- read.csv('dictionary.csv', stringsAsFactors = F)
summer <- tbl_df(summer)
colSums(is.na(summer))
library(readr)
library(dplyr)
library(ggplot2)
summer <- read.csv('summer.csv')
winter <- read.csv('winter.csv')
dictionary <- read.csv('dictionary.csv', stringsAsFactors = F)
summer <- tbl_df(summer)
colSums(is.na(summer))
s.olympics <- summer %>%
rename(Code = Country) %>%
left_join(., dictionary, by = 'Code')
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(medal.count = n()) %>%
arrange(desc(medal.count)) %>%
head(10)
View(top10.countries)
summer$Country[is.na(summer$Country)]
View(summer)
sum(is.na(summer$Country))
View(top10.countries)
top10.countries <- s.olympics %>%
group_by(Country)
View(top10.countries)
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(medal.count = n())
top10.countries <- s.olympics %>%
group_by(Country) %>%
summarise(medal.count = n())
top10.countries
colSums(is.na(s.olympics))
s.olympics <- tbl_df(summer) %>%
rename(Code = Country) %>%
left_join(., dictionary, by = 'Code')
colSums(is.na(colSums(is.na(summer))))
s.olympics <- tbl_df(summer) %>%
rename(Code = Country) %>%
left_join(., dictionary, by = 'Code')
colSums(is.na(s.olympics))
s.olympics[is.na(s.olympics$Country)]
s.olympics[,is.na(s.olympics$Country)]
s.olympics[is.na(s.olympics$Country), ]
s.olympics %>% select(Code, Country) %>%
filter(is.na(s.olympics$Country))
s.olympics %>% select(Code) %>%
distinct(Code) %>%
filter(is.na(s.olympics$Country))
s.olympics %>% select(Code) %>%
distinct(Code) %>%
filter(is.na(s.olympics$Country))
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
select(Code) %>%
distinct(Code)
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
select(Code) %>%
distinct(Code) %>%
list()
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
select(Code) %>%
distinct(Code)
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Country) %>%
mutate(n = n()) %>%
select(Code, n)
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n)
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code)
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n)
colSums(is.na(s.olympics))
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n)
library(readr)
library(dplyr)
library(ggplot2)
summer <- read.csv('summer.csv')
winter <- read.csv('winter.csv')
dictionary <- read.csv('dictionary.csv', stringsAsFactors = F)
s.olympics <- tbl_df(summer) %>%
rename(Code = Country) %>%
left_join(., dictionary, by = 'Code')
colSums(is.na(s.olympics))
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n)
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n) %>%
order_by(n)
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n) %>%
order_by(n, Code)
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n) %>%
order_by(desc(n))
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n) %>%
order_by(desc(n))
s.olympics %>% filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n) %>%
arrange(desc(n))
s.olympics.na <- s.olympics %>%
filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n) %>%
arrange(desc(n))
View(s.olympics.na)
s.olympics.na <- s.olympics %>%
filter(is.na(s.olympics$Country)) %>%
group_by(Code) %>%
mutate(n = n()) %>%
select(Code, n) %>%
distinct(Code, n) %>%
arrange(desc(n))
s.olympics.na
missing.country <- s.olympics.na$Code
rpart.plot(model.dt$finalModel)
setwd("~/Code/Data Science Projects/Kaggle-Submissions/Cuisine - What's Cooking")
library(dplyr)
library(ggplot2)
library(tm)
library(caret)
library(rpart)
library(rpart.plot)
library(jsonlite)
library(rattle)
data.train <- fromJSON('train.json', flatten = T)
data.test <- fromJSON('test.json', flatten = T)
library(dplyr)
library(ggplot2)
library(tm)
library(caret)
library(rpart)
library(rpart.plot)
library(jsonlite)
library(rattle)
data.train <- fromJSON('train.json', flatten = T)
data.test <- fromJSON('test.json', flatten = T)
ggplot(data.train, mapping = aes(x = cuisine)) +
geom_bar() +
coord_flip()
prop.table(table(as.factor(data.train$cuisine)))
ingredients <- Corpus(VectorSource(data.train$ingredients))
ingredients.prep <- tm_map(ingredients, stripWhitespace)
ingredients.prep <- tm_map(ingredients.prep, stemDocument)
inspect(ingredients.prep[[1]])
ingredients.dtm <- DocumentTermMatrix(x = ingredients.prep)
ingredients.dtm <- removeSparseTerms(ingredients.dtm, sparse = 0.99)
ingredients.df <- as.data.frame(as.matrix(ingredients.dtm))
ingredients.df$cuisine <- as.factor(data.train$cuisine)
set.seed(777)
tr.ctrl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3,
verboseIter = T, classProbs = T,
selectionFunction = 'oneSE')
model.dt <- train(cuisine ~ ., data = ingredients.df, trControl = tr.ctrl,
method = 'rpart', metric = 'Kappa')
model.dt
model.dt
rpart.plot(model.dt$finalModel)
#pred.dt <- predict(model.dt, newdata = data.test, type = 'raw')
save.image("~/Code/Data Science Projects/Kaggle-Submissions/Cuisine - What's Cooking/cuisine.RData")
