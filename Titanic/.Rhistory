swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
oring_function('My first function!')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I","am","Paresh")
submit()
mad_libs(place = "Pune", adjective = "mad", noun = "statue")
submit()
'I'%p%'love'%p%'R!'
getwd
getwd()
install.packages('lubridate')
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot2")
install.packages("jpeg")
install.packages("jpeg")
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
swirl()
str(mpg)
qplot(x = mpg$displ, y = mpg$hwy, data = mpg)
qplot(x = mpg$displ, y = mpg$hwy)
qplot(x = displ, y = hwy, data = mpg)
qplot(x = displ, y = hwy, data = mpg, aes(color = drv) )
qplot(x = displ, y = hwy, data = mpg, color = drv )
qplot(x = displ, y = hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot")
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot", color = manufacturer)
hist(x = hwy, data = mpg, aes(fill = drv))
hist(mpg, x = hwy, aes(fill = drv))
hist(hwy, mpg, aes(fill = drv))
skip()
qplot(x = displ, y = hwy, data = mpg, facets = . ~ drv)
hist(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
swirL()
swirL()
swirl
swirl()
qplot(x = displ, y = hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(data = mpg, aes(x = displ, y = hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 0.5)
g + geom_point(aes(color =  drv), size = 4, alpha = 0.5)
g + geom_point(aes(color =  drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color =  drv), size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color =  drv)) + theme_bw(base_family = "Times")
library("swirl")
swirl()
plot(x = myx, y = myy, type = 'l', ylim = c(-3, 3))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = year))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(facets = drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(facets = drv ~ cyl, margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black')
g + geom_point() + facet_grid(facets = drv ~ cyl, margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black') + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
library(swirl)
Paresh
swirl()
installed.packages("fields")
installed.packages("fields")
install.packages('fields')
swirl()
dist(dataFrame)
distxy
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = 'blue')
abline(h = 0.4, col = 'red')
5
12
abline(h = 0.05, col = 'green')
dist(dFsm)
hc
heatmap(x = dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
cmat
plot(x = cx, y = cy, col = c('red', 'orange', 'purple'), pch = 3, cex = 2, lwd = 2)
plot(x = cx, y = cy, col = c("red","orange","purple"), pch = 3, cex = 2, lwd = 2)
points(x = cx, y = cy, col = c('red', 'orange', 'purple'), pch = 3, cex = 2, lwd = 2)
mdist(x = x, y = y, cx = cx, cy = cy)
apply(X = distTmp, 2, FUN = which.min)
points(x = x, y = y, pch = 19, cex = 2, cols1[newClust])
points(x = x, y = y, pch = 19, cex = 2, col = cols1[newClust])
tapply(X = x, INDEX = newClust, FUN = mean())
tapply(X = x, INDEX = newClust, FUN = mean)
tapply(X = y, INDEX = newClust, FUN = mean)
points(x = newCx, y = newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x = x, y = y, cx = newCx, cy = newCy)
apply(X = distTmp2, 2, FUN = which.min)
points(x = x, y = y, pch = 19, cex = 2, cols1[newClust2])
points(x = x, y = y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(X = x, INDEX = newClust2, FUN = mean)
tapply(X = y, INDEX = newClust2, FUN = mean)
points(x = finalCx, y = finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
View(dataFrame)
kmeans(x = dataFrame, centers = 3)
kmObj$iter
plot(x = x, y = y, col = kmObj$cluster, pch = 19, cex = 2)
points(x = kmObj$centers, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6), pch = 19, cex = 2)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6)$cluster, pch = 19, cex = 2)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6)$cluster, pch = 19, cex = 2)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6)$cluster, pch = 19, cex = 2)
version
install.packages(c("assertthat", "chron", "colorspace", "curl", "data.table", "DBI", "digest", "fields", "ggplot2", "jsonlite", "openssl", "R6", "Rcpp", "readr", "stringi", "stringr", "swirl", "tibble", "tidyr", "yaml"))
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('RGtk2')
version
setwd("~/Code/R/R Projects/Titanic")
library('dplyr')
library('ggplot2')
library('caret')
train <- read.csv('train.csv')
test <- read.csv('test.csv')
str(train)
table(train$Survived)
prop.table(table(train$Survived))
# Assuming everyone in test set died
test$Survived <- rep(0, 418)
# Creating Submission file
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(x = submit, file = 'theyallperish.csv', row.names = F)
# compare sex with survived
prop.table(table(train$Sex, train$Survived), margin = 1)
# margin = 1 provides proportion for each row
# Assuming all females in test set survived and all males died
test$Survived[test$Sex == 'female'] <- 1
# Creating Submission file
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(x = submit, file = 'allfemalessurivive.csv', row.names = F)
# Dealing with Age
summary(train$Age)
# Creating Child age group
train$Child <- 0
train$Child[train$Age < 18] <- 1
# here we are assuming all NA ages are adults
# Finding survival based on Sex and Child
# aggregate(Survived ~ Sex + Child, data = train, FUN = sum)
# aggregate(Survived ~ Sex + Child, data = train, FUN = length)
aggregate(Survived ~ Sex + Child, data = train,
FUN = function(x){ sum(x) / length(x) })
# No New conclusion here. Females survive.
# Checking the Pclass and Fare
# Since Fare is continous, we divide it into discrete groups
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
# Finding survival based on Fare, Pclass & Sex
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train,
FUN = function(x){ sum(x) / length(x) })
# we notice that most of the class 3 women who paid more
# than $20 for their ticket actually have low survival rate
# Adding this to submission
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
# Creating Submission file
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(x = submit, file = 'class3fare20femalesperish.csv', row.names = F)
##########################################################################
# Using Decision Trees
library('rpart')
fit <- rpart(formula = Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare,
data = train, method = 'class')
# new packages for better graphics
library('rattle')
library('rpart.plot')
library('RColorBrewer')
# generating the Decision Tree
fancyRpartPlot(model = fit)
# generating predictions
Prediction <- predict(fit, newdata = test, type = 'class')
# Creating Submission file
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(x = submit, file = 'myfirstdtree.csv', row.names = F)
?rpart.control
fit <- rpart(formula = Survived ~ Pclass + Sex + Age + SibSp + Prach + Fare,
data = train, method = 'class',
control = rpart.control(minsplit = 2, cp = 0))
fit <- rpart(formula = Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare,
data = train, method = 'class',
control = rpart.control(minsplit = 2, cp = 0))
fancyRpartPlot(model = fit)
Prediction <- predict(fit, newdata = test, type = 'class')
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(x = submit, file = 'maxdtree.csv', row.names = F)
new.fit <- prp(x = fit, snip = T)$obj
fancyRpartPlot(new.fit)
new.fit <- prp(x = fit, snip = T)$obj
fancyRpartPlot(new.fit)
View(train)
View(test)
train2 <- train
test2 <- test
train <- train[, 1:12]
test <- test[, 1:11]
test$Survived <- NA
combi <- rbind(train, test)
View(combi)
View(train)
View(test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
View(combi)
strsplit(x = combi$Name[1], split = [,.])
strsplit(x = combi$Name[1], split = '[,.]')
strsplit(x = combi$Name[1], split = '[,.]') [[1]]
strsplit(x = combi$Name[1], split = '[,.]') [[1]] [2]
# Getting Title for the first name
strsplit(x = combi$Name[1], split = '[,.]')
strsplit(x = combi$Name[1], split = '[,.]') [[1]]
strsplit(x = combi$Name[1], split = '[,.]') [[1]] [2]
combi$Title <- sapply(X = combi$Name,
FUN = {strsplit(x = combi$Name, split = '[,.]')) [[1]] [2]}
combi$Title <- sapply(X = combi$Name,
FUN = {strsplit(x = combi$Name, split = '[,.]') [[1]] [2])}
combi$Title <- sapply(X = combi$Name,
FUN = {strsplit(x = combi$Name, split = '[,.]') [[1]] [2]})
combi$Title <- sapply(X = combi$Name, FUN = function(x){
strsplit(x = combi$Name, split = '[,.]') [[1]] [2]})
combi$Title <- sapply(X = combi$Name, FUN = function(x){
strsplit(x , split = '[,.]') [[1]] [2]})
combi$Title <- sub(pattern = ' ', replacement = '', x = combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
table(combi$Title)
combi$Title[combi$Title %in% c('Dona', 'Jonkheer', 'Lady', 'the Countess')] <- 'Lady'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
table(combi$Title)
combi$Title <- as.factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Title <- sapply(X = combi$Name, FUN = function(x){
strsplit(x , split = '[,.]') [[1]] [1]]})
combi$Title <- sapply(X = combi$Name, FUN = function(x){
strsplit(x , split = '[,.]') [[1]] [1]})
# Getting Title of all names
combi$Title <- sapply(X = combi$Name, FUN = function(x){
strsplit(x , split = '[,.]') [[1]] [2]})
# trimming spaces from Title
combi$Title <- sub(pattern = ' ', replacement = '', x = combi$Title)
# Looking at all the titles
table(combi$Title)
# Combining Redudant titles
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Dona', 'Jonkheer', 'Lady', 'the Countess')] <- 'Lady'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
# Turning Title into factor
combi$Title <- as.factor(combi$Title)
# Getitng FamilySize
combi$FamilySize <- combi$SibSp + combi$Parch + 1
# Getting Surname
combi$Surname <- sapply(X = combi$Name, FUN = function(x){
strsplit(x , split = '[,.]') [[1]] [1]})
# Creating FamilyID by combining Surname
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = '')
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
table(combi$FamilyID)
famID <- data.frame(table(combi$FamilyID))
View(famID)
famID <- famID[famID$Freq <= 2, ]
combi$FamilyID[combi$FamilyID %in% famID$Var1] <- 'Small'
combi$FamilyID <- as.factor(combi$FamilyID)
table(combi$FamilyID)
# Creating FamilyID by combining Surname
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = '')
# Three single Johnsons would all have the same Family ID.
# Given we were originally hypothesising that large families might have
# trouble sticking together in the panic, let’s knock out any family size
# of two or less and call it a “small” family.
# This would fix the Johnson problem too.
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
table(combi$FamilyID)
# check the familyid
table(combi$FamilyID)
# a few seemed to have slipped through the cracks here.
# There’s plenty of FamilyIDs with only one or two members,
# even though we wanted only family sizes of 3 or more.
# Lets clean it up
famID <- data.frame(table(combi$FamilyID))
# subset this dataframe to show only those unexpectedly small FamilyID groups
famID <- famID[famID$Freq <= 2, ]
# convert FamilyID with size <= 2 to 'Small'
combi$FamilyID[combi$FamilyID %in% famID$Var1] <- 'Small'
combi$FamilyID <- as.factor(combi$FamilyID)
train.org <- train
test <- test[, 1:11]
test.org <- test
test$Survived <- NA
# Getting original train and test datasets
train2 <- train
train <- train[, 1:12]
train.org <- train
test2 <- test
test <- test[, 1:11]
test.org <- test
# Adding NA Survived to test and combining both
test$Survived <- NA
combi <- rbind(train, test)
# Working on Name field
combi$Name <- as.character(combi$Name)
combi$Name[1]
# Getting Title for the first name
strsplit(x = combi$Name[1], split = '[,.]')
strsplit(x = combi$Name[1], split = '[,.]') [[1]]
strsplit(x = combi$Name[1], split = '[,.]') [[1]] [2]
# Getting Title of all names
combi$Title <- sapply(X = combi$Name, FUN = function(x){
strsplit(x , split = '[,.]') [[1]] [2]})
# trimming spaces from Title
combi$Title <- sub(pattern = ' ', replacement = '', x = combi$Title)
# Looking at all the titles
table(combi$Title)
# Combining Redudant titles
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Dona', 'Jonkheer', 'Lady', 'the Countess')] <- 'Lady'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
# Turning Title into factor
combi$Title <- as.factor(combi$Title)
# Getitng FamilySize
combi$FamilySize <- combi$SibSp + combi$Parch + 1
# Getting Surname
combi$Surname <- sapply(X = combi$Name, FUN = function(x){
strsplit(x , split = '[,.]') [[1]] [1]})
# Creating FamilyID by combining Surname
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = '')
# Three single Johnsons would all have the same Family ID.
# Given we were originally hypothesising that large families might have
# trouble sticking together in the panic, let’s knock out any family size
# of two or less and call it a “small” family.
# This would fix the Johnson problem too.
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
# check the familyid
table(combi$FamilyID)
# a few seemed to have slipped through the cracks here.
# There’s plenty of FamilyIDs with only one or two members,
# even though we wanted only family sizes of 3 or more.
# Lets clean it up
famID <- data.frame(table(combi$FamilyID))
# subset this dataframe to show only those unexpectedly small FamilyID groups
famID <- famID[famID$Freq <= 2, ]
# convert FamilyID with size <= 2 to 'Small'
combi$FamilyID[combi$FamilyID %in% famID$Var1] <- 'Small'
combi$FamilyID <- as.factor(combi$FamilyID)
# Splitting Combi into Train and Test
train
train <- combi[1:891, ]
test <- combi[892:1309, ]
fit <- rpart(formula = Survived ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID,
data = train, method = 'class')
fancyRpartPlot(model = fit)
Prediction <- predict(fit, newdata = test, type = 'class')
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(x = submit, file = 'featuredtree.csv', row.names = F)
summary(combi$Age)
Agefit <- rpart(formula = Survived ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age)], method = 'anova')
Agefit <- rpart(formula = Survived ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age), ], method = 'anova')
combi$Age[is.na(combi$Age)] <- predict(object = Agefit,
newdata = combi[is.na(combi$Age), ])
summary(combi$Age)
summary(combi$Age)
summary(combi)
combi$Embarked[which(combi$Embarked == '')] <- 'S'
which(combi$Embarked == ''
which(combi$Embarked == '')
combi$Embarked <- as.factor(combi$Embarked)
which(is.na(combi$Fare))
combi$Fare[which(is.na(combi$Fare))] <- median(combi$Fare, na.rm = T)
summary(combi)
combi$FamilyID2 <- as.character(combi$FamilyID)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- as.factor(combi$FamilyID2)
install.packages('RandommForest')
install.packages('RandomForest')
install.packages('randomForest')
library('randomForest')
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID2,
data = train, importance = T, ntree = 2000)
# Splitting Combi into Train and Test
train <- combi[1:891, ]
test <- combi[892:1309, ]
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID2,
data = train, importance = T, ntree = 2000)
varImpPlot(x = fit)
Prediction <- predict(fit, newdata = test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(x = submit, file = 'firstforest.csv', row.names = F)
install.packages('party')
library('party')
set.seed(415)
fit <- cForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
controls = cforest_unbiased(ntree = 2000, mtry = 3))
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID,
data = train,
controls = cforest_unbiased(ntree = 2000, mtry = 3))
Prediction <- predict(object = fit, newdata = test, OOB = T, type = 'response')
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
source('~/Code/R/R Projects/Titanic/Titanic.R', echo=TRUE)
write.csv(x = submit, file = 'cforest.csv', row.names = F)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(x = submit, file = 'cforest.csv', row.names = F)
